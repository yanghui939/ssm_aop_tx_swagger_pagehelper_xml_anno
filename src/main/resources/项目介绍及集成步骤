ssm实现配置aop,注解aop,配置事务，注解事务，swagger插件，pagehelper插件
sql脚本在resources目录下的user.sql里
1、ssm实现xml配置aop
    1.1导入依赖
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-aop</artifactId>
                    <version>5.2.4.RELEASE</version>
                </dependency>
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-aspects</artifactId>
                    <version>5.1.6.RELEASE</version>
                </dependency>
                <dependency>
                    <groupId>org.aspectj</groupId>
                    <artifactId>aspectjweaver</artifactId>
                    <version>1.9.2</version>
                </dependency>
    1.2、编写切面类
        @Slf4j
        public class Aop_xml {

            public void before(JoinPoint joinPoint){
                String methodName = joinPoint.getSignature().getName();
                List<Object> argList = Arrays.asList(joinPoint.getArgs());
                log.info("前置通知的方法名为：{}，参数为：{}",methodName,argList);
            }

            public void afterThrowing(JoinPoint joinPoint,Exception ex){
                String methodName = joinPoint.getSignature().getName();
                List<Object> argList = Arrays.asList(joinPoint.getArgs());
                log.info("异常通知的方法名为：{}，参数为：{}，异常为：{}",methodName,argList,ex);
            }
            public void afterReturning(JoinPoint joinPoint,Object result){
                String methodName = joinPoint.getSignature().getName();
                List<Object> argList = Arrays.asList(joinPoint.getArgs());
                log.info("后置通知的方法名为：{}，参数为：{}，返回为：{}",methodName,argList,result);
            }
            public void after(JoinPoint joinPoint){
                String methodName = joinPoint.getSignature().getName();
                List<Object> argList = Arrays.asList(joinPoint.getArgs());
                log.info("最终通知的方法名为：{}，参数为：{}",methodName,argList);
            }
        }
    1.3、在applicationContext.xml编写xml
         <!--xml配置aop   start-->
         //注入切面类
         <bean id="aop" class="com.yh.util.Aop_xml"/>
         <aop:config>
         <!--配置切点-->
             <aop:pointcut id="pt1" expression="execution(* *..*.*ServiceImpl.*(..))"/>
             <aop:aspect ref="aop">
                <aop:before method="before" pointcut-ref="pt1"/>
                <aop:after-returning method="afterReturning" pointcut-ref="pt1" returning="result"/>
                <aop:after-throwing method="afterThrowing" pointcut-ref="pt1" throwing="ex"/>
                <aop:after method="after" pointcut-ref="pt1"/>
             </aop:aspect>
         </aop:config>
         <!--xml配置aop   end-->
2、ssm实现注解aop
    2.1、与1.1导包一样
    2.2、编写切面类
        @Component
        @Aspect
        @Slf4j
        public class Aop_anno {

            @Pointcut("execution(* *..*.*ServiceImpl.*(..))")
            public void pt2() {

            }

            @Before("pt2()")
            public void before(JoinPoint joinPoint) {
                String methodName = joinPoint.getSignature().getName();
                List<Object> argList = Arrays.asList(joinPoint.getArgs());
                log.info("前置通知的方法名为：{}，参数为：{}", methodName, argList);
            }

            @AfterThrowing(pointcut = "pt2()", throwing = "ex")
            public void afterThrowing(JoinPoint joinPoint, Exception ex) {
                String methodName = joinPoint.getSignature().getName();
                List<Object> argList = Arrays.asList(joinPoint.getArgs());
                log.info("异常通知的方法名为：{}，参数为：{}，异常为：{}", methodName, argList, ex);
            }

            @AfterReturning(pointcut = "pt2()", returning = "result")
            public void afterReturning(JoinPoint joinPoint, Object result) {
                String methodName = joinPoint.getSignature().getName();
                List<Object> argList = Arrays.asList(joinPoint.getArgs());
                log.info("后置通知的方法名为：{}，参数为：{}，返回为：{}", methodName, argList, result);
            }

            @After("pt2()")
            public void after(JoinPoint joinPoint) {
                String methodName = joinPoint.getSignature().getName();
                List<Object> argList = Arrays.asList(joinPoint.getArgs());
                log.info("最终通知的方法名为：{}，参数为：{}", methodName, argList);
            }
        }
    2.3、在applicationContext.xml编写xml开启对注解aop的支持
        <aop:aspectj-autoproxy/>
3、ssm注解事务的实现
    3.1、pom文件导入依赖
                 <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-tx</artifactId>
                    <version>5.2.4.RELEASE</version>
                </dependency>
    3.2、在applicationContext.xml编写xml对注解开启
        <!--注解事务  start-->
            <!--配置事务管理器-->
            <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <!--注入数据源-->
            <property name="dataSource" ref="dataSource"/>
            </bean>
            <!--开启对事务注解的支持-->
            <tx:annotation-driven transaction-manager="transactionManager"/>
            <!--注解事务  end-->
    3.3、使用注解
        只要在需要事务的方法或者类上加@Transactional(isolation = Isolation.DEFAULT,
        readOnly = false,propagation = Propagation.REQUIRED,rollbackFor = Exception.class)
        注解即可
4、ssm实现xml配置事务
    4.1、pom文件导入依赖
        与3.1一样
    4.2、在applicationContext.xml编写xml
            <!--xml配置事务  start-->
            <!--配置事务管理器-->
            <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <!--注入数据源-->
            <property name="dataSource" ref="dataSource"/>
            </bean>
            <!--配置事务的属性-->
            <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
            <tx:method name="*" isolation="DEFAULT" read-only="false" propagation="REQUIRED" />
            </tx:attributes>
            </tx:advice>
            <aop:config>
            <!--定义切点-->
            <aop:pointcut id="pt" expression="execution(* *..*.*ServiceImpl.*(..))"/>
            <!--绑定切点与事务-->
            <aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>
            </aop:config>
            <!--xml配置事务  end-->
      这样就对符合这个表达式* *..*.*ServiceImpl.*(..)的方法实现了事务
5、ssm实现swagger
    5.1、pom文件导入依赖(如果项目中没有json依赖，还要加json依赖)
                        <dependency>
                            <groupId>io.springfox</groupId>
                            <artifactId>springfox-swagger2</artifactId>
                            <version>2.9.2</version>
                        </dependency>
                        <dependency>
                            <groupId>io.springfox</groupId>
                            <artifactId>springfox-swagger-ui</artifactId>
                            <version>2.9.2</version>
                        </dependency>
    5.2、编写swagger配置类
        @EnableSwagger2
        public class SwaggerConfig {

            @Bean
            public Docket createApi() {
                return new Docket(DocumentationType.SWAGGER_2)
                        .apiInfo(apiInfo())
                        .select()
                        .apis(RequestHandlerSelectors.basePackage("com.yh.controller"))
                        .paths(PathSelectors.any())
                        .build();
            }

            private ApiInfo apiInfo() {
                return new ApiInfoBuilder()
                        .version("1.0.0")
                        .description("swagger描述")
                        .title("swagger标题")
                        .contact(new Contact("yh", "www.baidu.com", "222.126.com"))
                        .build();
            }
        }
    5.3、在spring-MVC.xml配置扫描配置类和过滤静态文件
            //扫描配置类
            <bean class="com.yh.config.SwaggerConfig"/>
            //过滤静态文件
            <mvc:resources location="classpath:/META-INF/resources/" mapping="swagger-ui.html"/>
            <mvc:resources location="classpath:/META-INF/resources/webjars/" mapping="/webjars/**"/>
    5.4、在控制层使用
        @Controller
        @Api(value = "用户所有接口",tags = "用户接口")     //作用在类上的swagger注解
        public class UserController {
            @Resource
            private UserService userService;

            @GetMapping("/findAllUser")
            @ResponseBody
            @ApiOperation(value = "查询所有用户的接口",tags = "查询所有用户的接口")  //作用在方法上的swagger注解
            public List<User> findAllUser() {
                return userService.findAll();
            }

            @GetMapping("/findUserByPage/{pageIndex}/{pageSize}")
            @ResponseBody
            @ApiOperation(value = "分页查询用户的接口", tags = "分页查询用户的接口")     //作用在方法上的swagger注解
            @ApiImplicitParams({                                                         //对参数的注解
                    @ApiImplicitParam(name = "pageIndex",value = "当前页码",required = true,example = "1"),
                    @ApiImplicitParam(name = "pageSize",value = "每页条数",required = true,example = "1"),
            })
            public PageInfo<User> findUserByPage(@PathVariable("pageIndex") Integer pageIndex,
                                                 @PathVariable("pageSize") Integer pageSize) {
                return userService.findUserByPage(pageIndex,pageSize);
            }

            @GetMapping("/transfer/{sourceId}/{targetId}/{money}")
            @ResponseBody
            @ApiOperation(value = "转账接口",tags = "转账接口")    //作用在方法上的swagger注解
            @ApiImplicitParams({                                  //对参数的注解
                    @ApiImplicitParam(name = "sourceId",value = "转账人id",required = true,example = "1"),
                    @ApiImplicitParam(name = "targetId",value = "收账人id",required = true,example = "2"),
                    @ApiImplicitParam(name = "money",value = "转账金额",required = true,example = "100")
            })
            public String transfer(@PathVariable("sourceId") Integer sourceId,
                                   @PathVariable("targetId") Integer targetId,
                                   @PathVariable("money") Integer money) {
                try {
                    userService.transfer(sourceId, targetId, money);
                } catch (Exception e) {
                    e.printStackTrace();
                    return "error";
                }
                return "success";
            }
        }
6、ssm整合pagehelper
    6.1、pom文件导入依赖
                <dependency>
                    <groupId>com.github.pagehelper</groupId>
                    <artifactId>pagehelper</artifactId>
                    <version>5.1.11</version>
                </dependency>
    6.2、在applicationContext.xml配置插件
                <!--创建sqlSessionFactory-->
                <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
                    <!--注入数据源-->
                    <property name="dataSource" ref="dataSource"/>
                    <!--配置映射文件路径-->
                    <property name="mapperLocations" value="classpath:com/yh/dao/*Mapper.xml"/>
                    <!--配置别名-->
                    <property name="typeAliasesPackage" value="com.yh.pojo"/>

                    <!--配置pagehelper插件-->
                    <property name="plugins">
                        <array>
                            <bean class="com.github.pagehelper.PageInterceptor">
                                <property name="properties">
                                    <value>
                                        helperDialect=mysql
                                        reasonable=true
                                    </value>
                                </property>
                            </bean>
                        </array>
                    </property>
                </bean>
    6.3、在项目的使用
        @Override
            public PageInfo<User> findUserByPage(Integer pageIndex, Integer pageSize) {
                //开启分页插件并设置分页参数
                PageHelper.startPage(pageIndex,pageSize);
                //查询所有
                List<User> allUser = userDao.findAllUser();
                //设置到PageInfo实现分页
                PageInfo<User> pageInfo= new PageInfo<>(allUser);
                return pageInfo;
            }